-- MySQL dump 10.13  Distrib 5.5.49, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: huhaiyang
-- ------------------------------------------------------
-- Server version	5.5.49-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ckeditor_assets`
--

DROP TABLE IF EXISTS `ckeditor_assets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ckeditor_assets` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `data_file_name` varchar(255) NOT NULL,
  `data_content_type` varchar(255) DEFAULT NULL,
  `data_file_size` int(11) DEFAULT NULL,
  `assetable_id` int(11) DEFAULT NULL,
  `assetable_type` varchar(30) DEFAULT NULL,
  `type` varchar(30) DEFAULT NULL,
  `width` int(11) DEFAULT NULL,
  `height` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_ckeditor_assetable_type` (`assetable_type`,`type`,`assetable_id`),
  KEY `idx_ckeditor_assetable` (`assetable_type`,`assetable_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ckeditor_assets`
--

LOCK TABLES `ckeditor_assets` WRITE;
/*!40000 ALTER TABLE `ckeditor_assets` DISABLE KEYS */;
/*!40000 ALTER TABLE `ckeditor_assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,'搭建博客时遇到的一些问题','<p>为了提高自己的水平（好吧，我在装逼），决定把自己的博客搭建起来，以后在上面发表和记录一些自己的经验，随笔之类的东西（因为脑子不好使）。</p>\r\n\r\n<p>1.在使用rails 的 gem ckeditor 时，遇见几个问题。</p>\r\n\r\n<p>a. 由于并没有使用默认的application.html.erb 作为模版，使用了自己定义的样式。所以在使用 &nbsp;ckeditor 时忘了修改文件中多js ,css的饮用，所以一度无法显示编辑的控件。</p>\r\n\r\n<p>b. 在ckeditor &nbsp;编辑好了文本之后，表单会把包含html标签和各种转义符号的文字保存到数据库。如果不加处理的话，直接在视图中展示的话，会把标签之类的都显示出来，所以方法就是修改显示时的代码，加上sanitite 就能对内容进行解析，转换成想要的页面效果，所见即所得。</p>\r\n\r\n<p>c.无法与上面的sanitite方法组合使用truncate ,从而无法对显示的字数进行设置，很是困扰。</p>\r\n\r\n<p>2.在部署到服务器上时，关于Gem 也遇到很多问题。比如一直报 gem &#39;json&#39; ~&gt;&#39;1.8.1&#39; 无法bundle 上，原因是记录在Gemfile.lock文件里的版本都在1.8.1以上，所以解决办法是把Gemfile.lock 删除，重新bundle install 一下，基本就能解决问题。</p>\r\n','2015-07-24 16:12:48','2015-07-24 16:12:48'),(2,'关于window 水平滑出 收回的效果使用方法','<div style=\"color: rgb(0, 0, 0); font-family: Arial, Verdana, sans-serif; font-size: 14px; line-height: 21px;\">为了实现titanium window水平滑出，水平收回的效果</div>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: Arial, Verdana, sans-serif; font-size: 14px; line-height: 21px;\">我在alloy.js 文件中实例化了Titanium.UI.createAnimation()的俩个对象</div>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: Arial, Verdana, sans-serif; font-size: 14px; line-height: 21px;\">\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; //从右到左滑动</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_left = Titanium.UI.createAnimation()&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_left.left =&nbsp;0</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_left.duration =&nbsp;500</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;//从左到右滑动</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_right = Titanium.UI.createAnimation()&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_right.left =&nbsp;&#39;100%&#39;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;slide_to_right.right =&nbsp;&#39;-100%&#39;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;slide_to_right.duration =&nbsp;500</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;所以各位想给自己的windows 增加效果的话。三步实现</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.目标window 让它的 left ＝ &lsquo;100%&rsquo;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.父类controller 在打开他的时候记得在open() 方法中增加一个参数，就叫 open(slide_to_left)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;如：在cases.coffee 中</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Alloy.createController(&#39;case_preview&#39;,&nbsp;the_case).getView().open(slide_to_left)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3.页面关闭时，在close()方法中增加一个参数,就叫close（slide_to_right）</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 如：在case_preview.coffee中</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;$.case_preview.close(slide_to_right)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>这样就实现了window水平向左滑出，水平向右收回的效果。</p>\r\n</div>\r\n','2015-07-28 03:00:03','2015-07-28 03:00:03'),(3,'appium 使用心得（1）','<p>为了实现手机app测试自动化，可以使用一个听说很不错的东西。叫做appium。它可以实现自动化测试ios ,android手机应用。Mac os X 有app供下载的，地址是&nbsp;https://bitbucket.org/appium/appium.app/downloads/。</p>\r\n\r\n<p>它可以支持使用java ,js ,ruby 等语言来写测试脚本，应该是非常不错的，在testerhome 上也有一些人在使用。</p>\r\n\r\n<p>遇到的坑：</p>\r\n\r\n<p>把appium.dmg下下来之后，根据他的官方文档里的说明，一直在使用项目的ipa包来测试，问题出现了，一直循环闪退。一直报错说什么&nbsp;<a class=\"fancy-title\" href=\"https://discuss.appium.io/t/appium-v1-3-0-beta1-xcode-6-1-failed-looking-up-pid-of-launched-process/1015\" style=\"color: rgb(34, 34, 34); text-decoration: none; cursor: pointer; background: transparent;\">Failed looking up pid of launched process</a>，找了各种方法来解决，最后发现不用ipa ,用生成的＊.app 包，其实我也试过很多次，一直报同样的问题，直到大师来点击的时候，他也点击/build/iphone/build/Debug-iphonesimulator/＊.app文件，结果就跑起来了，真是郁闷之极，而我一直没明白原因在哪。</p>\r\n\r\n<p>下午，我大概知道问题在哪了，因为我选择的打包的时候，好像是指定了设备，所以打包出来的＊.app文件里可能就有对应的配置信息在里面，解决办法就是在打包的时候，直接用命令 $ ti build --platform ios &nbsp;就好了，虽然他默认启动的simulator为4s，但不要紧，我们要的是他生成的那个＊.app文件而已。</p>\r\n\r\n<p>在GUI 上能做的事情并不多，终究还是要通过命令行来实现自动化测试，所以这里就需要写脚本，略懂一点点ruby 的皮毛，所以选择用 ruby ， 这就需要按照官方的步骤来做了。</p>\r\n\r\n<p>首先：官方提供命令是 $&nbsp;<span style=\"font-family:arial; font-size:18px\"><span style=\"font-size:12px\">npm install &ndash;g appium </span>，</span>然而，会被卡住的，哎</p>\r\n\r\n<p>所以：我们要改用国内的镜像 命令是 $&nbsp;<span style=\"font-size:12px\"><span style=\"font-family:arial\">npm --registry&nbsp;</span><a href=\"http://registry.cnpmjs.org/\" style=\"color: rgb(51, 102, 153); text-decoration: none; font-family: Arial; font-size: 18px; line-height: 26px;\" target=\"_blank\">http://registry.cnpmjs.org</a><span style=\"font-family:arial\">&nbsp;install -g appium &nbsp;<span style=\"font-size:14px\">可以在命令尾端加上--verbose 来查看进度</span></span></span></p>\r\n\r\n<p>一番紧张的等待之后，貌似装上了，哈哈哈哈哈哈哈。此时，我们可以使用命令 $ appium -v 来查看下版本号， 再使用命令 $ appium-doctor 来检测环境是否准备好.</p>\r\n\r\n<p>多么激动人心的时刻，然后继续</p>\r\n\r\n<p>我最后还是为了节省时间，所以放弃ruby 选择 js 来写脚本，所以需要继续配置 javascript 的环境</p>\r\n\r\n<p>首先 $ npm install wd&nbsp;</p>\r\n\r\n<p>然后，你又跳进一个坑了，哈哈哈哈哈哈哈哈，真是一坑更比一坑深啊。</p>\r\n\r\n<p>当你真的用node 命令去执行一个脚本的时候，你就发现，报错，说是没有什么&#39; chai &#39; module之类的，心力交瘁啊。于是又是一番谷歌，找到了一个网页：&nbsp;https://github.com/appium/sample-code/issues/23 里面最开始就被一位大哥狠狠的臭骂了一顿，我也想骂，WTF！然后下面也有大哥给出解决方案，那我们就按照他的来吧，结果，又尼玛一堆坑。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-08-18 05:14:59','2015-08-19 01:27:09'),(4,'一点感悟','<p>当你在困惑迷茫的时候，一定要和高手们聊聊，这样才有利于你走出困境，坚定信心！</p>\r\n','2015-08-20 01:11:06','2015-08-20 01:11:06'),(5,'appium 使用心得（2）','<p>整个appium 的使用研究，基本花费了我一个礼拜的时间，也许是我太笨了。哎</p>\r\n\r\n<p>装好ruby的环境之后，我们就要开始写ruby的脚本了，痛苦还在继续。</p>\r\n\r\n<p>最初的时候，如果不知道脚本该怎么写的话，这个时候就可以在appium app的帮助下来写了。</p>\r\n\r\n<p>首先启动app</p>\r\n\r\n<p>点击launch 按钮，启动appium server ,这是基于你把东西都配置好了，很快你就可以看见 simulator 被启动了 。点击放大镜，就是 inspector ，通过 inspector 你可以查看各个UI 元素的各种属性值，如：name , xpath ,value 等等。这些东西在你写脚本的时候就可以通过方法 find_element(:xpath,&#39;xxxxxxxx&#39;) # 类似于 find_element_by_xpath&nbsp;</p>\r\n\r\n<p>点击record 按钮，它会弹出一个代码框，你可以选择你喜欢的语言 ruby ，node.js ,java ,它会记录你的行为，如点击，滑动等，对应的转化成代码，对于我这样的菜鸟来说，这是一个启蒙。</p>\r\n\r\n<p>我们也可以通过点击 save&nbsp;按钮来导出该文件出来, 然后可以命令行来运行该文件，ruby就用 $ ruby your_test.rb , js就用node your_test.js ，以此类推。</p>\r\n\r\n<p>这里面还会有一个问题，就是两句代码之间如 ：</p>\r\n\r\n<p>find_element(:name,&#39;点击1&#39;).click()</p>\r\n\r\n<p>find_element(:name,&#39;点击2&#39;).click()</p>\r\n\r\n<p>往往会被报错说找不到某元素，其实它就在你面前，哎，在两句之间加上sleep 2 之类的语句让它等一下再往下执行,这样就不会再报错了，我就他么的不知道原因在哪了，郁闷死我了。</p>\r\n\r\n<p>最后,既然用的是ruby来写，那就把这个文件与ruby 的test/unit 来结合起来写，里面加上一些 assert （断言），这才稍微看起来像点测试文件。</p>\r\n\r\n<p>目前，我也就只是做到这，心里累的很！</p>\r\n','2015-08-21 07:54:09','2015-08-21 07:58:59'),(6,'appium 使用心得（android ）','<p>之前写的那些东西基本能保证测试ios app 时，不会有问题，接下来就开始做android app 的测试。</p>\r\n\r\n<p>同理，我们先appium-doctor 一下检车我们的环境，结果显示我的ANDOID_HOME not set ,那就设置吧。</p>\r\n\r\n<p>首先，找到自己的android sdk 的路径，如果用的shell 是bash的话，$ vim &nbsp;.bash_profile ,如果是zsh的话 $ vim .zshrc ,打开之后在结尾加上&nbsp;</p>\r\n\r\n<p>export ANDROID_HOME=/Users/Gavin/workspaces/android-sdk-macosx</p>\r\n\r\n<p>#这是我的路径，自己找找自己的吧</p>\r\n\r\n<p>然后 保存，source .zshrc ,再检测一下，这回说没设置 java_home ,同理找到java的路径</p>\r\n\r\n<p>这个就麻烦些，先输入</p>\r\n\r\n<p>$ cd /usr/bin</p>\r\n\r\n<p>然后找到java&nbsp;</p>\r\n\r\n<p>$&nbsp;&nbsp;ls -l |grep java</p>\r\n\r\n<p>然后会看见一些软链接，复制/System/Library/Frameworks/JavaVM.framework/Versions/Current</p>\r\n\r\n<p>再找到.zshrc,加入</p>\r\n\r\n<p>export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/Current</p>\r\n\r\n<p>再source .zshrc&nbsp;</p>\r\n\r\n<p>再 appium-doctor ,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-08-21 09:16:11','2015-08-21 09:30:00'),(7,'Mac 忘记密码时候怎么办','<p>由于工作原因，需要我给另一台mac mini 配置开发环境，结果有密码，且前主人还忘了密码，于是不得不解决这个问题</p>\r\n\r\n<p>找到一个国外大哥的办法：http://www.wikihow.com/Reset-a-Lost-Admin-Password-on-Mac-OS-X（可以直接看下面的视频，更直接简单）</p>\r\n\r\n<p>1.重启Mac，且按住command + s</p>\r\n\r\n<p>2.进入命令行（这里大概就是系统根目录），输入 mount &nbsp;－uw /</p>\r\n\r\n<p>3.然后再输入 rm /var/db/.AppleSetupDone &nbsp;(应该是删掉系统数据库中的配置文件)</p>\r\n\r\n<p>4.最后再输入 shutdown -h now</p>\r\n\r\n<p>5.回车，电脑关机了，然后再开机，然后就可以重新配置电脑了，之前的账号也保留住了，进去后一切都好说了</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-08-25 06:22:45','2015-08-25 06:22:45'),(8,'解决没有vpn 环境下下载chrome扩展程序问题','<p>在没有vpn情况下，就算你有chrome 浏览器，有vpn账号 也没什么卵用，所以先得下载下该扩展程序的文件，可是没有网你去哪下啊，尤其是新机器，除非你先配置电脑的vpn。</p>\r\n\r\n<p>关于制作下载链接可以参照这里：&nbsp;http://yurl.sinaapp.com/crx.php （这里需要你知道程序的id）</p>\r\n\r\n<p>我自己已经把ssledge 代理的程序安装文件下载下来了，所以直接公开一个链接直接下载吧，省的那么费劲</p>\r\n\r\n<p>网盘：http://pan.baidu.com/s/17Ehmm</p>\r\n\r\n<p>下载后，打开chrome浏览器，打开扩展程序列表，直接把下载下来的安装文件直接拖拽进去，然后就安装，然后输入自己的账号，开始使用了。</p>\r\n','2015-08-25 07:48:03','2015-08-25 07:48:03'),(9,'npm 国内镜像下载','<p>最近经常需要使用npm install -g ** &nbsp;但是使用的都是官方的镜像，其速度可想而知，有时候还经常失败，所以我们需要把镜像改为国内镜像，好，让我们开干吧</p>\r\n\r\n<p>1.设置全局使用指定的镜像</p>\r\n\r\n<p>$ npm &nbsp;config &nbsp;set &nbsp;registry &nbsp;&lt; registry url &gt;</p>\r\n\r\n<p>注意 ：&lt; registry url &gt; 指的就是镜像的url ，比如http://registry.npm.taobao.org/</p>\r\n\r\n<p>2.也可以在安装的时候才制定镜像</p>\r\n\r\n<p>$ npm &nbsp;install &nbsp; --registry &nbsp;&lt; registry url &gt;</p>\r\n\r\n<p>如之前的</p>\r\n\r\n<p>这样可用，但也麻烦，所以我们可以使用 nrm 这个model 来切换镜像</p>\r\n\r\n<p>// 全局安装</p>\r\n\r\n<p>$ npm install -g nrm</p>\r\n\r\n<p>// 查看所有的镜像</p>\r\n\r\n<p>$ nrm ls</p>\r\n\r\n<p>// 对比所有镜像的访问速度</p>\r\n\r\n<p>$ nrm test</p>\r\n\r\n<p>//使用淘宝的镜像</p>\r\n\r\n<p>$ nrm use taobao&nbsp;</p>\r\n\r\n<p>这样就好了</p>\r\n\r\n<p>资料引用：http://www.html-js.com/article/Methods-Laispace-gitnpmbowergem-mirror-set-or-agent</p>\r\n','2015-08-25 08:25:12','2015-08-25 08:25:12'),(10,'appium 使用心得（3）','<p>昨天又在给新机器配置appium 的环境，结果又是不顺利，好不容易把appium，ruby 环境配好，从我原先的电脑上拷了一个在本地测试过的.app包，结果报错说：&lsquo;could not found the file app.js&rsquo; ,实验了好几次，用同事的电脑也打包出一个.app包，在他们本地也没问题，一旦拷贝到别人的机器上就报同样的错误。结合之前的检索过的资料，我怀疑是新的机器没有配成开发机器，也就是没有证书之类的。所以我～又得的给新机器撞上titaniun的环境。而且还不知道是不是这个问题。</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-08-26 01:18:41','2015-08-26 01:18:41'),(11,'grunt 的坑','<p>关于grunt的好处我就不说了，我们用的到titanium 项目中大量的使用到grunt,coffee ,jade ,stss&nbsp;</p>\r\n\r\n<p>&nbsp;安装可以看大师这篇文章：http://siwei.me/blog/posts/grunt-unable-to-find-local-grunt&nbsp;</p>\r\n\r\n<p>问题就是，如果你的node版本不是，0.10.37 的话，grunt-sass就装不上</p>\r\n\r\n<p>解决办法看这里：还是大师的文章：http://siwei.me/blog/posts/nvm-node</p>\r\n','2015-08-26 06:41:55','2015-08-26 06:41:55'),(12,'感想2','<p>抱怨是没有任何正面影响的，与其这样不如闭着嘴，埋头干。</p>\r\n','2015-08-26 14:14:26','2015-08-26 14:14:26'),(13,'关于titanium 的一点感想','<p>从去年这个时候知道Titanium 这个东西到现在，已经使用它一年了，也参与开发了好几个项目，并且一直在使用。做出来的项目如果要打分的话，基本是不合格的，这之间的原因有很多。想过很多，有了如下一些感想。</p>\r\n\r\n<p>1.Titanium 起源于国外，所以他的官方文档都是英文，如果大家英语很烂，就算过了六级，但是专业英语很难的话，这在你阅读和理解整个文档上就有着很大的阻碍，所以我们的团队对文档读的少，读的浅显。</p>\r\n\r\n<p>2.正因为大家对文档读的不够，所以很多东西是不清楚的，一知半解的，就开始干活了，然后就带着自己以往对代码，对开发的各种理解开始干了，面对titanium官方自带的一些非常棒的东西给视而不见了，比如window中的swipe，侧滑手势，干了一年才发现，呵呵，而且至今还是没人用。</p>\r\n\r\n<p>3.错误的经验代代相传，除了领导，主体成员都是大四刚毕业，而且很多大学都是混日子的，包括我自己在内，所以真正的代码经验可以说没有，就算有也都是垃圾，而真正领导们传授的经验，在向下执行的时候，大家却当作耳边风，已经将垃圾进行到底。更要命的是，我们这些菜逼员工中很喜欢将自己的垃圾代码传授给新同学，并且很得意自己的作品，新同学也就跟着做了。于是，老员工带着新员工一起走弯路。大家一边走着，一边还在感叹怎么还这么远啊，而这路上就有人就看出问题了，选择不走弯路，换了条路走。</p>\r\n\r\n<p>4.Titanium 开发过程有很多的坎，比如支付，比如推送，团队整体开发能力其实是很差的，所以一直被绊住，所以一直承受着领导，同事们的压力。但这其实可以借鉴别人做的module，这个世界也不全是菜逼，很多大神在几年前就已经做好了，完全可以拿来用，学习。</p>\r\n\r\n<p>5.其实我对titanium 是非常有信心的，它确实是能解放生产力，我们要好好学习，少走弯路，这样，才能把它利用好，创造价值。</p>\r\n\r\n<p>路还很长，要耐的住性子，既然没有那种天分，就好好的用汗水来<span style=\"font-family:arial,tahoma,microsoft yahei,宋体,sans-serif; font-size:34px\">弥补。</span></p>\r\n','2015-08-29 06:20:14','2015-08-29 06:20:14'),(14,'关于思想','<h2>opinions are like assholes，everybody has one</h2>\r\n','2015-09-07 05:29:58','2015-09-07 05:29:58'),(15,'Titanium 本地存储的几个策略','<p>手机应用中经常需要涉及到本地数据存储的问题，Titanium也提供了几个选择。</p>\r\n\r\n<p>首先要用到Titanium的本地存储的话，下面几个对象是必须使用到的：</p>\r\n\r\n<p>1.<span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">Titanium.App.Properties</span><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;：最理想的是用来存储程序相关的设置信息。</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">2.</span><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">Titanium.Database： 用来访问titanium提供的sqlite 3 数据库。</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">3.Titanium.Filesystem ：用于文件和目录操作的。</span></p>\r\n\r\n<p><font color=\"#222222\" face=\"menlo, courier new, courier, monospace\"><span style=\"font-size:14px; line-height:20.3636px\">使用上面这些对象都可以保障用户的应用经历关机，重进，重新安装甚至换了一个设备，也能把数据持久化。</span></font></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Properties</p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">Titanium.App.Properties 能够提供一个轻量级的key/value(键值对)存储。Titanium提供方法来读写string，integer，boolean，array类型的属性。任何数据都可以转换成JSON格式，都可以被存储在一个应用的属性中。Properites是一个存储小块数据的很好选择，例如你的应用的配置信息。但是如果你有很多的数据要存储，或者你需要关系型数据的话，最好你还是选择使用使用数据库。</span></p>\r\n\r\n<p>Database</p>\r\n\r\n<p>在iOS和Android上，都包含了一个SQLite3 数据库引擎。简单的说，SQLite是一个简单的数据库管理系统，支持大多数的SQL92 规格。</p>\r\n\r\n<p>数据库适合用来存储你要操作的大块数据。你可以定义table 和 column，可以像SQLServer和MySQL一样加强表于表之间的关系。数据会一直持续化，除非用户卸载你的应用，或者你覆盖了数据，或者删掉了数据。</p>\r\n\r\n<h3>Filesystem</h3>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">Titanium.Filesystem能够让你对用户手机里的文件进行读写操作。总的来说，你的应用会限制别的程序来读写自己的文件，也不能访问被别的应用创建的文件。在Android上，你的应用可以把文件存储到手机自带或者外接的（比如扩展的SD卡）存储空间上。文件系统是一个很好存放图片或者其他二进制文件的地方。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">那我们该如何选择自己的最佳方式呢？</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">我们可以根据具体的情况来做实际的选择：</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">1.</span><strong>Application Properties － 通常用于下面几种情况：</strong></p>\r\n\r\n<p><strong>&nbsp; &nbsp; &nbsp;a. 数据是由简单的键值对组成。</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; b.数据与应用的关系比与用户的关系要更密切。</strong></p>\r\n\r\n<p><strong>&nbsp; &nbsp; &nbsp;c.数据不需要依赖于别的数据。</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; d.数据基本是不会变的。</strong></p>\r\n\r\n<p><strong>2 .&nbsp;Database</strong><strong>&nbsp;－ 通常用于下面几种情况：</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; &nbsp;a.有狠很多相似的数据内容</strong></p>\r\n\r\n<p><strong>&nbsp; &nbsp; &nbsp; b.数据之间存在依赖关系</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; &nbsp;c. 你希望灵活的取出数据</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; &nbsp;b.数据会随着时间来变化，比如交易数据，日志数据或者档案数据</strong></p>\r\n\r\n<p><strong>3.&nbsp;Filesystem&nbsp;－ 通常用于下面几种情况：</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; a. 数据是具有文件格式的</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp; &nbsp; b. 数据是图片文件</strong></p>\r\n','2015-09-16 02:36:10','2015-09-16 02:36:10'),(16,'Titanium使用Properties来实现轻量级的数据持久化','<p><tt><font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">这里我们学习用</font>Ti.App.Properties</tt><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;API来存储简单的或者复杂的数据，并且学习取出数据。</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">iOS和Android一样，都把app properties（属性）存在文件系统中的特殊文件里。大家都知道(我还真不知道)，在iOS里面iOS properties就是存储在应用目录下的.plist文件里的NSUserDefaults。在Android上，是存放在</span><span style=\"color:rgb(34, 34, 34); font-family:menlo,courier new,courier,monospace; font-size:14px\">/data/data/com.domainname.appname/shared_prefs/titanium.xml里。Titanium提供</span><tt>Titanium.App.Properties</tt><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;API 设置和获取app 的properties。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Reading and Writing Properties（读写属性）</p>\r\n\r\n<p>Titanium提供6组get/set方法来处理6种不同的数据类型：</p>\r\n\r\n<p>a. getBool()/setBool() :布尔类型</p>\r\n\r\n<p>b.getDouble()/setDouble(): 双精度浮点类型</p>\r\n\r\n<p>c.getInt()/setInt():整型</p>\r\n\r\n<p>d.getLIst()/setList(): 数组</p>\r\n\r\n<p>e. getString()/setString() :字符串</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>get方法接收一个属性名字和它的默认值。这样，如果一个属性没有预先设置，那么将返回他的默认值。每一个set方法要求要有一个属性的键值对。如下代码：</p>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var window = Titanium.UI.createWindow({</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>backgroundColor:</code><code>&#39;#999&#39;</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>});</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var myArray = [ { name:</code><code>&#39;Name 1&#39;</code><code>, address:</code><code>&#39;1 Main St&#39;</code><code>}, {name:</code><code>&#39;Name 2&#39;</code><code>, address:</code><code>&#39;2 Main St&#39;</code><code>}, {name:</code><code>&#39;Name 3&#39;</code><code>, address:</code><code>&#39;3 Main St&#39;</code><code>}, {name:</code><code>&#39;Name 4&#39;</code><code>, address:</code><code>&#39;4 Main St&#39;</code><code> } ];</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setString(</code><code>&#39;myString&#39;</code><code>,</code><code>&#39;This is a string&#39;</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setInt(</code><code>&#39;myInt&#39;</code><code>,</code><code>10</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setBool(</code><code>&#39;myBool&#39;</code><code>,</code><code>true</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setDouble(</code><code>&#39;myDouble&#39;</code><code>,</code><code>10.6</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setList(</code><code>&#39;myList&#39;</code><code>,myArray);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>// **********************************************</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>// Notice the use of the second argument of the get* methods below</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>// that would be returned if no property exists with that name</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>// **********************************************</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;String: &quot;</code><code>+Ti.App.Properties.getString(</code><code>&#39;myString&#39;</code><code>,</code><code>&#39;This is a string default&#39;</code><code>));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;Integer: &quot;</code><code>+Ti.App.Properties.getInt(</code><code>&#39;myInt&#39;</code><code>,</code><code>20</code><code>));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;Boolean: &quot;</code><code>+Ti.App.Properties.getBool(</code><code>&#39;myBool&#39;</code><code>,</code><code>false</code><code>));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;Double: &quot;</code><code>+Ti.App.Properties.getDouble(</code><code>&#39;myDouble&#39;</code><code>,</code><code>20.6</code><code>));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;List: &quot;</code><code>+Ti.App.Properties.getList(</code><code>&#39;myList&#39;</code><code>));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>window.open();</code></div>\r\n\r\n<p>输出结果如下：</p>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>String: This is a string</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Integer: </code><code>10</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Boolean: </code><code>true</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Double: </code><code>10.600000381469727</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>List:</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>{ </code><code>&#39;address&#39;</code><code> : </code><code>&#39;1 Main St&#39;</code><code> </code><code>&#39;name&#39;</code><code> : </code><code>&#39;Name 1&#39;</code><code>, },</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>{ </code><code>&#39;address&#39;</code><code> : </code><code>&#39;2 Main St&#39;</code><code> </code><code>&#39;name&#39;</code><code> : </code><code>&#39;Name 2&#39;</code><code>, },</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>{ </code><code>&#39;address&#39;</code><code> : </code><code>&#39;3 Main St&#39;</code><code> </code><code>&#39;name&#39;</code><code> : </code><code>&#39;Name 3&#39;</code><code>, },</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>{ </code><code>&#39;address&#39;</code><code> : </code><code>&#39;4 Main St&#39;</code><code> </code><code>&#39;name&#39;</code><code> : </code><code>&#39;Name 4&#39;</code><code>, }</code></div>\r\n\r\n<p>&nbsp;在properties中把js对象存储为JSON</p>\r\n\r\n<p>如果你有一个比较复杂的Javascript对象，你可以通过JSON.stringify()方法来转化成JSON字符串。你可以用<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;</span><a class=\"external-link external-link\" href=\"http://docs.appcelerator.com/platform/latest/#!/api/Titanium.App.Properties-method-setString\" style=\"box-sizing: border-box; color: rgb(37, 138, 175); text-decoration: none; font-family: \'Helvetica Neue\', helvetica, arial, sans-serif; font-size: 14px; line-height: 21px;\">Titanium.App.Properties.setString()</a>方法来存储到数据库。如下：</p>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var window = Titanium.UI.createWindow({</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>backgroundColor:</code><code>&#39;#999&#39;</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>});</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var weatherData = { </code><code>&quot;reports&quot;</code><code> : [ { </code><code>&quot;city&quot;</code><code>: </code><code>&quot;Mountain View&quot;</code><code>, </code><code>&quot;condition&quot;</code><code>: </code><code>&quot;Cloudy&quot;</code><code>, </code><code>&quot;icon&quot;</code><code>: </code><code>&quot;http://www.worldweather.org/img_cartoon/pic23.gif&quot;</code><code> }, { </code><code>&quot;city&quot;</code><code>: </code><code>&quot;Washington, DC&quot;</code><code>, </code><code>&quot;condition&quot;</code><code>: </code><code>&quot;Mostly Cloudy&quot;</code><code>, </code><code>&quot;icon&quot;</code><code>: </code><code>&quot;http://www.worldweather.org/img_cartoon/pic20.gif&quot;</code><code> }, { </code><code>&quot;city&quot;</code><code>: </code><code>&quot;Brasilia&quot;</code><code>, </code><code>&quot;condition&quot;</code><code>: </code><code>&quot;Thunderstorm&quot;</code><code>, </code><code>&quot;icon&quot;</code><code>: </code><code>&quot;http://www.worldweather.org/img_cartoon/pic02.gif&quot;</code><code> } ] };</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.App.Properties.setString(</code><code>&#39;myJSON&#39;</code><code>, JSON.stringify(weatherData));</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var retrievedJSON=Ti.App.Properties.getString(</code><code>&#39;myJSON&#39;</code><code>, </code><code>&#39;myJSON not found&#39;</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>Ti.API.info(</code><code>&quot;The myJSON property contains: &quot;</code><code> + retrievedJSON);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>window.open();</code></div>\r\n\r\n<p>&nbsp;输出的日子如下：</p>\r\n\r\n<p><code>The myJSON property contains: {</code><code>&quot;reports&quot;</code><code>:[{</code><code>&quot;city&quot;</code><code>:</code><code>&quot;Mountain View&quot;</code><code>,</code><code>&quot;condition&quot;</code><code>:</code><code>&quot;Cloudy&quot;</code><code>,</code><code>&quot;icon&quot;</code><code>:</code><code>&quot;http://www.worldweather.org/img_cartoon/pic23.gif&quot;</code><code>},{</code><code>&quot;city&quot;</code><code>:</code><code>&quot;Washington, DC&quot;</code><code>,</code><code>&quot;condition&quot;</code><code>:</code><code>&quot;Mostly Cloudy&quot;</code><code>,</code><code>&quot;icon&quot;</code><code>:</code><code>&quot;http://www.worldweather.org/img_cartoon/pic20.gif&quot;</code><code>},{</code><code>&quot;city&quot;</code><code>:</code><code>&quot;Brasilia&quot;</code><code>,</code><code>&quot;condition&quot;</code><code>:</code><code>&quot;Thunderstorm&quot;</code><code>,</code><code>&quot;icon&quot;</code><code>:</code><code>&quot;http://www.worldweather.org/img_cartoon/pic02.gif&quot;</code><code>}]}</code></p>\r\n\r\n<p><code>我们也可以把已经转化成JSON的字符串再解析会JS</code></p>\r\n\r\n<p><code>var myObject = JSON.parse(Ti.App.Properties.getString(</code><code>&#39;myJSON&#39;</code><code>));</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-09-16 03:48:25','2015-09-16 03:48:25'),(17,'Titanium操作数据库','<p>这里我们要学习下Titanium内置的SQLite3的增删改查。已经创建数据库，数据表，和取回数据，存储数据。</p>\r\n\r\n<p>SQLite3是SQLite的第三版本的结构化查询语言，基于关系型数据库管理系统。被Apple，Google，RIM选作本地化存储数据库。SQLite是目前世界上被使用最广的数据库。之所以流行是因为它是开源的，空间资源占用少，不想其他的数据库管理系统一样要依赖已经安装的服务器。安装和维护都非常简单。</p>\r\n\r\n<p>当你第一次使用SQLite的时候，有些东西是你要注意的，这是能影响你开发的：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;1.SQLite数据是存储在以一个简单的文本文件里，安全性很差，任何人都可以通过文件系统来访问读取它里面的内容。</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;2.这里只支持下面五种数据类型：<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;TEXT, NUMERIC, INTEGER, REAL, NONE</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;&nbsp; &nbsp; &nbsp;3.二进制对象（BLOBs）存储时，会当作像文本一样处理。因此访问BLOBs不是理想的办法。建议把二进制文件存储在文件系统里，把文件的路径存在数据库里。</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;&nbsp; &nbsp; &nbsp;4.SQLite支持同时读取操作，但不支持强制写入操作。这因为在执行文件写入的时候会有一个文件系统锁（filesystem lock</span><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">），这在多线程程序上是一个非常重要的地方。</span></p>\r\n\r\n<p><span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,arial,sans-serif; font-size:14px\">&nbsp;&nbsp; &nbsp; 5.</span><span style=\"color:rgb(69, 69, 69); font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">参照完整性（Referential Integrity）默认是不支持的。</span></p>\r\n\r\n<p><span style=\"color:rgb(69, 69, 69); font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">&nbsp;&nbsp; &nbsp; 6.</span><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">右连接(RIGHT OUTER JOIN)、全连接(FULL OUTER JOIN)也都不支持。</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">&nbsp;&nbsp; &nbsp; 7.ALTER TABLE也是受限制的，字段也不能被修改和删除。</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">Titanium通过Titanium.Database module 来访问SQLite数据库。Titanium.Database.ResultSet 对象用于接收查询所返回的数据。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">创建和安装数据库</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">有两个选择来创建或者安装数据库到你的应用里：</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">1.创建一个空的数据库，在你的app中通过SQL声明来定义好它的结构和内容。</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">2.安装一个预先定义好的数据库，装配上你的app。</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">创建数据库：</span></p>\r\n\r\n<p><span style=\"font-family:arial,宋体,sans-serif,tahoma,microsoft yahei; font-size:14px\">要创建数据库的话，你要使用到Titanium.Database.open()方法。如果你要的打开的数据库不存在的话，Titanium会自动帮你创建。无论是这个数据库已经存在还是后来由Titanium帮你创建的，这样调用的话，都会返回一个数据库connection handle。</span></p>\r\n\r\n<p><code>var db = Ti.Database.open(</code><code>&#39;weatherDB&#39;</code><code>);</code></p>\r\n\r\n<p><code>这里有一些平台特殊情况：</code></p>\r\n\r\n<p><code>&nbsp;&nbsp; 1.在iOS上，数据库文件被创建之后，会自动的加上.sql的文件后缀，但是在Android上就不会加上后缀。</code></p>\r\n\r\n<p><code>&nbsp;&nbsp; 2.在iOS5上，数据库文件被存在app私有文件夹中（在设备存储上），在iOS4上，数据库文件存放在应用的database文件夹里。</code></p>\r\n\r\n<p><code>&nbsp;&nbsp; 3.在iOS 5.0.1&nbsp;以后数据库将会包含任何用户上传到iCloud的数据。</code></p>\r\n\r\n<p><code>&nbsp; &nbsp;4.在Android上，数据库被创建在设备的内部存储中，你可以删掉它，也可以安装程序把数据库安装在外接存储上。在内部存储时，标准的文件路径是&quot;/data/data/com.example.yourappid/databases/dbname&quot;。</code></p>\r\n\r\n<p><code>一旦你创建了数据库，你下一步就是要建立你的数据结构了。Titanium不支持抽象的库。你要使用辨准的SQL声明来操作数据库。你可以使用&quot;CREATE TABLE IF NOT EXISTS&quot;的语句来安全的创建数据表，这样即使表已经存在了，也会忽略创建。</code></p>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>//bootstrap the database</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var db = Ti.Database.open(</code><code>&#39;TiBountyHunter&#39;</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>db.execute(</code><code>&#39;CREATE TABLE IF NOT EXISTS fugitives(id INTEGER PRIMARY KEY, name TEXT, captured INTEGER, url TEXT, capturedLat REAL, capturedLong REAL);&#39;</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>db.close();</code></div>\r\n\r\n<p>&nbsp;你可能注意到了，在最后我们把数据库个给关闭了。关闭数据库连接对于程序很重要。</p>\r\n\r\n<p>控制上传数据到iCloud</p>\r\n\r\n<p>App可能需要拒绝上传不必要和不合适的数据到iCloud。这就需要在给数据库和数据做设置</p>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>var db = Ti.Database.open(</code><code>&#39;TiBountyHunter&#39;</code><code>);</code></div>\r\n\r\n<div class=\"line\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(0, 0, 0); font-family: Consolas, \'Bitstream Vera Sans Mono\', \'Courier New\', Courier, monospace; font-size: 14px; line-height: 21px; background-color: rgb(240, 240, 240);\"><code>db.file.setRemoteBackup(</code><code>false</code><code>);</code></div>\r\n\r\n<p>这种设置最好只设置一次，但是设置多次也不会有问题。这样发布出去的app在启动的时候，会需要去设置。</p>\r\n\r\n<p>安装数据库</p>\r\n\r\n<p>你可以可以安装一个已经存在了的数据库</p>\r\n\r\n<p>&nbsp;</p>\r\n','2015-09-16 06:21:57','2015-09-17 02:36:47'),(18,'回归博客，感想','<p>突然想起自己还有一个自己的个人域名，好像还一直闲置着，突然想起来了，打开了huhaiyang.com，发现自己的网站已经访问不了了，502 Bad Gateway 才想起这个好像是部署在别人的服务器上了，最近大半年从全栈慢慢的开始转向了ios开发，之前一直在考虑移动开发，titanium是不是不适合，几个月前因为工作上的一些情况，我也下定决心，一定要走走看，原生的ios开发是怎样的。</p>\r\n\r\n<p>纠结了许久，是走oc呢还是swift，学了两三个礼拜的oc,之前写惯了ruby,js这些高级语言，我实在有些受不了oc罗里吧嗦的语法，太烦人了。于是冒险开始尝试些新的东西，于是看了一点swift,发现这个东西很有意思，和ruby，js 一样很简练，目前的趋势，oc的程序员们也都开始转向这门新兴且潜力无穷的语言。</p>\r\n\r\n<p>学习新的语言也不是真的就那么轻松，swift刚刚在5月12号的时候，发布了swift 3.0 开发者预览版。是的，开源的语言就是会有这样的优点和缺点，迭代快，变动也大。我从swift 1.0中学的一些东西在swift 2.0中就已经废弃了，总要不停的去学习新的特性。不过也好，愿意伴随这门语言一起成长。</p>\r\n\r\n<p>现在来说说我对这门语言的一些感想，几个月下来，有很多感想。</p>\r\n\r\n<p>优点：</p>\r\n\r\n<p>它是一个强类型语言，不同于我之前写的ruby ,js 这些弱类型语言，它对类型要求的非常严格，所以它也引入optiional这个概念，可选类型。这样使得它非常安全。</p>\r\n\r\n<p>其实优点很多，简洁，简单，等等</p>\r\n\r\n<p>在iOS开发中，有丰富的uiKIt组件可以给我使用，再也不用在像titanium时很多组件iOS有，android没有，现在纯粹的做native app,谁他妈还要管那android哦</p>\r\n\r\n<p>而且autoLayout这么个非常棒的东西来辅助我们布局，一次适配多个机型，再也不用像titanium一样那么无奈的去写各种判断条件</p>\r\n\r\n<p>缺点：</p>\r\n\r\n<p>这里我感受到的缺点主要是来之当我使用swift来开发app时，cocoapods会提供很多非常棒的第三方库，就想rails上会有很多非常方便非常好用的gem ，但多数，主流，著名的pod都是只oc的，所以当我们在使用的时候，就不得不要和oc进行桥接，混编，对于了解过oc的新手来说也不是那么轻松。</p>\r\n\r\n<p>其实还有很多，以后想到就在补充吧，我以后要把我现在这个博客好好利用起来，记录知识点。今天先写到这吧。</p>\r\n','2016-05-17 07:38:29','2016-05-17 07:38:29'),(19,'半年之后再碰ruby on rails ','<p>好久没碰ruby on rails 了，手都生了，都快忘了。这两天一直在忙着把博客部署上线，发现自己真的记性不好很多东西都忘了，所以现在写点我这两天上手以来要注意的一些地方</p>\r\n\r\n<p>1，青云：受公司和前领导的影响，我自己也买了一个青云账户，一点也不便宜啊～～，先吐槽一下，青云默认是不会启用我们平时常用的一些端口，比如80，443，21，22之类的端口，如果你自己先不开启的话，在开发的过程中会遇见很多的问题，这是要注意的</p>\r\n\r\n<p>2， nginx ,要部署的话，安照我之前的方式就是 nginx + thin ，nginx 作为前端服务器，thin作为后端服务器，nginx 接收浏览器过来的域名请求，在分发给 thin ,thin启动rails 应用。这里要注意的的是，在nginx.conf文件中默认监听的是80端口，所以一定要保证青云那边是开启了80端口。</p>\r\n\r\n<pre>\r\n  $ nginx -t  #（可能需要加sudo）\r\n  $ nginx -s reload</pre>\r\n\r\n<p>3，thin，在应用的config/thin.yml文件中配置好chdir之类的项目路径，写错了的话，也是开不起thin的</p>\r\n\r\n<pre>\r\n  $ bundle exec thin start -C config/thin.yml\r\n</pre>\r\n\r\n<p>4，dnspod那块也需要重新绑定你的青云的主机的公网ip，一般应用之后，几分钟之后生效，可以ping一下检查看看</p>\r\n','2016-05-18 06:03:21','2016-05-18 06:05:58'),(20,'swift NSCache -- 内存缓存','<p>NSCache&nbsp;</p>\r\n\r\n<p>NSCache 对象有点类似于集合，可以存储一些键值对，类似于NSDictionary类。开发的时候用到的一些数据，我们有缓存的话，就可以不必重复计算，这样就可以提高我们的应用的性能。当然我们这里存的数据是不能影响到应用的，NSCache是内存缓存，当应用的内存不够的时候，它会自动地，悄悄地被删除了，一次来缓解内存压力。</p>\r\n\r\n<p>官方文档&nbsp;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSCache_Class/</p>\r\n\r\n<p>以下是一个小例子，假设存在ExpensiveObjectClass这个类：</p>\r\n\r\n<pre>\r\n<code>let cache = NSCache()\r\nlet myObject: ExpensiveObjectClass\r\n\r\nif let cachedVersion = cache.objectForKey(&quot;CachedObject&quot;) as? ExpensiveObjectClass {\r\n	// use the cached version\r\n	myObject = cachedVersion\r\n} else {\r\n	// create it from scratch then store in the cache\r\n	myObject = ExpensiveObjectClass()\r\n	cache.setObject(myObject, forKey: &quot;CachedObject&quot;)\r\n}</code></pre>\r\n','2016-05-19 07:49:43','2016-05-19 07:49:43'),(21,'swift Haneke','<p>Haneke是我认为非常喜欢的，非常棒的一个轻量级缓存第三方库，可以缓存在内存和磁盘上。就我最近的使用感受来说，非常的棒。</p>\r\n\r\n<p><a href=\"https://github.com/Haneke/HanekeSwift\">官方github</a></p>\r\n\r\n<p>安装方式可以手动导入，但是我一直都很排斥，我还是喜欢用cocoapods 来安装，这里要注意的是</p>\r\n\r\n<pre>\r\nuse_frameworks!\r\npod &#39;HanekeSwift&#39; ＃这里的名字是HanekeSwift ，不是Haneke哦</pre>\r\n\r\n<p>引用：</p>\r\n\r\n<p>import Haneke ＃在你要使用文件上面要引用一下</p>\r\n\r\n<p>使用：</p>\r\n\r\n<p>shared ，Haneke提供shared cache ,我们可以使用imageCache,dataCache,stringCache,JSONCache.你还可以自定义自己的cache. cache又以键值对的形式来存储，这样很方便存和取。</p>\r\n\r\n<p>这里可以看看官方文档上的一个dataCache例子：</p>\r\n\r\n<pre>\r\nlet cache = Shared.dataCache\r\n\r\ncache.set(value: data, key: &quot;funny-games.mp4&quot;)\r\n\r\n// Eventually...\r\n\r\ncache.fetch(key: &quot;funny-games.mp4&quot;).onSuccess { data in\r\n    // Do something with data\r\n}</pre>\r\n\r\n<p>JSONCache:</p>\r\n\r\n<pre>\r\nlet cache = Shared.JSONCache\r\nlet URL = NSURL(string: &quot;https://api.github.com/users/haneke&quot;)!\r\n\r\ncache.fetch(URL: URL).onSuccess { JSON in\r\n   print(JSON.dictionary?[&quot;bio&quot;])\r\n}</pre>\r\n\r\n<p>因为json数据在我开发的时候接触最多，所以我比较喜欢这个，感觉比著名的Alamofire用起来还要方便，当然这里是个人感觉。</p>\r\n\r\n<p>关于image的特殊优待：</p>\r\n\r\n<p>Haneke对于image是有特殊优待的，这是我最喜欢的一个特性：</p>\r\n\r\n<pre>\r\n// Setting a remote image这里我们直接就可以把一个url放在图片上，相比原生的设置远程URL来说，便捷太多\r\nimageView.hnk_setImageFromURL(url)\r\n\r\n// Setting an image manually. Requires you to provide a key.\r\nimageView.hnk_setImage(image, key: key)</pre>\r\n\r\n<p>Formats(格式化)</p>\r\n\r\n<p>很多时候我们拿到了图片，可是有可能图片太大，手机拍出来的照片动不动就上几M，这么大的图片不管是下载还是上传成本都是很大的，十分不利于用户体验。很多时候我们都会想要把图片做resize ,裁剪，或者说分好多个不同分辨率版本。幸福的是，haneke 的formats就可以帮我们轻松的实现。</p>\r\n\r\n<p>下面是一个官方例子，先设置自己要自定义图片的大小 圆角是10，宽高都为1024，然后在把规则应用到要缓存的图片上</p>\r\n\r\n<pre>\r\nlet cache = Shared.imageCache\r\n\r\nlet iconFormat = Format&lt;UIImage&gt;(name: &quot;icons&quot;, diskCapacity: 10 * 1024 * 1024) { image in\r\n    return imageByRoundingCornersOfImage(image)\r\n}\r\ncache.addFormat(iconFormat)\r\n\r\nlet URL = NSURL(string: &quot;http://haneke.io/icon.png&quot;)!\r\ncache.fetch(URL: URL, formatName: &quot;icons&quot;).onSuccess { image in\r\n    // 此时图片会有了圆角,\r\n}</pre>\r\n\r\n<p>这些处理，haneke都会在后台进行，甚至，我们可以把format直接和uikit组建直接使用</p>\r\n\r\n<pre>\r\nimageView.hnk_setImageFromURL(url, format: iconFormat)</pre>\r\n','2016-05-20 03:33:44','2016-05-20 05:55:10'),(22,'Haneke refresh caches','<p>如何刷新我们的缓存呢</p>\r\n\r\n<p>Haneke在这一点上没有提供比较好的办法，没有过期时间的限定，没有重现获取缓存的方法，但没有关系，我们可以自己来解决。以下是示范如何缓存JSONCache，和刷新JSONCache</p>\r\n\r\n<p>1.先全局创建一个JSONCache的实例和一个URL变量</p>\r\n\r\n<p>&nbsp;let cache = Shared.JSONCache</p>\r\n\r\n<p>&nbsp;var URL = NSURL(string: &quot;http://news-at.zhihu.com/api/4/news/latest&quot;)! //我们这里以知乎日报的最新新闻api为url</p>\r\n\r\n<p>2.开始取数据</p>\r\n\r\n<blockquote>\r\n<p>cache.fetch(URL: URL).onSuccess { JSON in</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.dataArray = JSON.dictionary?[&quot;stories&quot;] as! NSArray&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dispatch_async(dispatch_get_main_queue(), {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tableView.reloadData()</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .onFailure { error in</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(&quot;出现错误\\(error)&quot;)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n</blockquote>\r\n\r\n<p>这次请求先会尝试从内存缓存中读取、然后是闪存和NSURLCache，假如没有找到数据，那Haneke&nbsp;会重新获取网络数据然后进行缓存，在这个栗子中，URL&nbsp;本身作为一个key保存。</p>\r\n\r\n<p>3.当我们要自主刷新，或者设置刷新的时候，我们可以这样做</p>\r\n\r\n<blockquote>\r\n<p>print(&quot;开始刷新－－&quot;)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cache.remove(key: &quot;http://news-at.zhihu.com/api/4/news/latest&quot;)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; URL = NSURL(string: &quot;http://news.at.zhihu.com/api/4/news/before/20160520&quot;)!</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cache.fetch(URL: URL).onSuccess({ JSON in</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.dataArray = JSON.dictionary?[&quot;stories&quot;] as! NSArray</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(self.dataArray)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dispatch_async(dispatch_get_main_queue(), {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tableView.reloadData()</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .onFailure({ error in</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(&quot;网络出错&quot;)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</p>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>这里面的URL是不是要变化成另一个url,取决于你自己的应用要求。我们发现我们先要在cache中删除以之前URL为key的cache,然后从新请求一下。目前我想到的办法就是这样，这样会有一个问题，当你先删掉之前的缓存去请求新数据的时候，如果这事网络不好，或者网络出错的话，之前还能用来展示的缓存现在再也看不到了，我们什么都展示不了，所以这个问题就会有点无奈。但不过瑕不掩瑜，我觉得Haneke还是非常的强大的，实际测试中，缓存出来的数据，加载非常之快，很棒。&nbsp;</p>\r\n','2016-05-20 09:04:03','2016-05-20 09:04:03'),(23,'UITableView的一些小技巧','<p>1.取消tableView的cell 分割线</p>\r\n\r\n<p>//去掉cell的分割线</p>\r\n\r\n<p>tableView.tableFooterView = UIView()</p>\r\n\r\n<p>2.让cell的高度自适应内容的高度</p>\r\n\r\n<p>a.一般的我们可以这么做，在方法heightForRowAtIndexPath中实现</p>\r\n\r\n<blockquote>\r\n<p>func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath :NSIndexPath) -&gt; CGFloat{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; let att = [NSFontAttributeName:UIFont.systemFontOfSize(17)]</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; return yourText.boundingRectWithSize(CGSizeMake(300,0),options: .UsesLineFragmentOrigin, attributes: att ,content :nil&nbsp;).size.height+20</p>\r\n\r\n<p>}</p>\r\n</blockquote>\r\n\r\n<p>这里要注意的是，在我们的storyboard里面记得把cell中label的lines设置为0！</p>\r\n\r\n<p>b.我们可以更简单</p>\r\n\r\n<p>在我们的viewDidLoad方法中，添加以下两行代码</p>\r\n\r\n<p>//让cell的高度自适应内容的高度</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; tableView.estimatedRowHeight = 60</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; tableView.rowHeight = UITableViewAutomaticDimension</p>\r\n\r\n<p>3.由上一步继续，来实现，点击第一行，扩展出多行，显示其与内容</p>\r\n\r\n<p>step 1:先到storyboard中把cell的label的lines改回为1</p>\r\n\r\n<p>step 2: 实现didSelectRowAtIndexPath()方法，在其中写入：</p>\r\n\r\n<blockquote>\r\n<p>&nbsp;func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; //先取到选择的cell</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; let cell = tableView.cellForRowAtIndexPath(indexPath)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; let lable = cell!.contentView.viewWithTag(1000) as! UILabel</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; tableView.beginUpdates()</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if lable.numberOfLines == 0 {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lable.numberOfLines = 1</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dict[String(indexPath.row)] = &quot;1&quot;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }else{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lable.numberOfLines = 0</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dict[String(indexPath.row)] = &quot;0&quot;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; tableView.endUpdates()</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n</blockquote>\r\n\r\n<p>step 3: 第二步中提到的dict是定义的一个全局的字典类型变量，我们用它来存每一个cell的numberOfLines的值</p>\r\n\r\n<p>var dict:Dictionary&lt;String,String&gt; = [:]</p>\r\n\r\n<p>step 4: &nbsp;在cellForRowAtIndexPath方法中加一个判断</p>\r\n\r\n<p>&nbsp;if dict[String(indexPath.row)] == &quot;0&quot; {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; label.numberOfLines = 0</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }else{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; label.numberOfLines = 1</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>这样就可以实现，点击单行内容的cell会进行展开，点击已经展开的cell会进行收回到一行的状态，其原理的关键就是在numberOfLines，默认最开始都是1,也是说一次加载进来的时候，大家都是一行显示的状态，但是你点了它之后，它立马把1改为了0，这样就可以多行显示了，也就是展开了，其中，tableView.beginUpdates 和tableView.endUpdates能够让展开的过程一帧一帧的显示，这也就实现了，动画的效果。</p>\r\n\r\n<p>3. 让cell的分割线顶头</p>\r\n\r\n<p>默认的系统给的分割线会向右偏移15，我们如何把这个偏移量改为0呢</p>\r\n\r\n<p>重载&nbsp;viewDidLayoutSubviews方法和实现tableView的willDisplayCell方法</p>\r\n\r\n<blockquote>\r\n<p>override func viewDidLayoutSubviews() {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; self.tableView.separatorInset = UIEdgeInsetsZero</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; self.tableView.layoutMargins = UIEdgeInsetsZero</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; func tableView(tableView: UITableView, willDisplayCell cell: UITableViewCell, forRowAtIndexPath indexPath: NSIndexPath) {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cell.separatorInset = UIEdgeInsetsZero</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; cell.layoutMargins = UIEdgeInsetsZero</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2016-05-23 05:53:48','2016-05-23 07:23:53'),(24,'TableView中实现图片在滑动的时候有偏移','<p>step 0 ：在storyboard中的高为300的cell中加入一个UIView，设置全铺cell，设置好约束。</p>\r\n\r\n<p>step 1 ：再加入一个高400的UIImageView.设置宽充满UIView的宽</p>\r\n\r\n<p>step 2 : 设置UIView的tag为2000，设置UIImageView的tag为2001</p>\r\n\r\n<p>step 3: &nbsp;因为tableView是继承自scrollView，所以在回调方法中scrollViewDidScroll（）实现如下代码</p>\r\n\r\n<p>注意：下面中的tableView.visibleCells表示出现在屏幕中的cell</p>\r\n\r\n<blockquote>\r\n<p>func scrollViewDidScroll(scrollView: UIScrollView) {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; for cell in tableView.visibleCells{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let bottomView = cell.contentView.viewWithTag(2000)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let image = bottomView?.viewWithTag(2001)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let rect = bottomView?.convertRect((bottomView?.bounds)!, toView: nil)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var Y = UIScreen.mainScreen().bounds.size.height - (rect?.origin.y)! - 600</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y*=0.2</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if Y&gt;0{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = 0</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if Y &lt; -100{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = 100</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; image?.frame.origin.y = Y</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n</blockquote>\r\n\r\n<p>step 4: 设置行高</p>\r\n\r\n<blockquote>\r\n<p>func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; return 300</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>step 5 :此时运行程序的话，会发现，刚加载上来的几张图片会有空隙，这是因为上面这个方法只对已经滑动起来出现在屏幕上的cell其作用,因为代码写在监听滑动的方法里，开始的时候，还没有滑动。所以我们在cellForRowAtIndexPath方法中也加上类似代码</p>\r\n\r\n<blockquote>\r\n<p>&nbsp;let bottomView = cell.contentView.viewWithTag(2000)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; let image = bottomView?.viewWithTag(2001)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; let rect = bottomView?.convertRect((bottomView?.bounds)!, toView: nil)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; var Y = UIScreen.mainScreen().bounds.size.height - (rect?.origin.y)! - 600</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Y*=0.2</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if Y&gt;0{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = 0</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; if Y &lt; -100{</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Y = 100</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; image?.frame.origin.y = Y</p>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n','2016-05-23 07:50:21','2016-05-23 07:50:21'),(25,'MVVM','<p>&nbsp;MVVM模式</p>\r\n','2016-05-23 09:45:59','2016-05-23 09:45:59'),(26,'swift FileSystem','<p>文件系统是一个非常重要的知识点，当我们需要把一些数据存储在手机本地的话，就可能会用到文件系统，例如缓存。</p>\r\n\r\n<p>首先，我们都知道iOS一直是以安全著称的，这是因为它的手机中的每个应用都是独立地，以sandbox的模式存在的，自己只能访问自己的应用下的文件路径，绝不让你越雷池半步。</p>\r\n\r\n<p>每个应用会默认创建三个文件夹：Documents,Library,Temp</p>\r\n\r\n<p>Documents:&nbsp;存放应用程序产生的数据，会被itunes备份同步</p>\r\n\r\n<p>Library:&nbsp;包含两个子目录：Caches 和 Preferences</p>\r\n\r\n<ul>\r\n	<li>Preferences：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好,会被itunes备份同步.</li>\r\n	<li>Caches：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息,不会被itunes备份同步。</li>\r\n</ul>\r\n\r\n<p>Temp: 存放临时数据,当不在用时应该删除掉临时文件,系统也有可能在程序不运行时删除该文件夹下内容</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>获取目录方法：</p>\r\n\r\n<blockquote>\r\n<p>//获取主目录路径</p>\r\n\r\n<p>var homeDir = NSHomeDirectory()</p>\r\n\r\n<p>print(homeDir)</p>\r\n</blockquote>\r\n\r\n<p>获取主目录下的Documents目录：</p>\r\n\r\n<blockquote>\r\n<p>//获取Documents目录路径</p>\r\n\r\n<p>var paths = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true)</p>\r\n\r\n<p>var documentsDirectory = paths[0] as! String&nbsp;</p>\r\n\r\n<p>print(documentsDirectory)</p>\r\n\r\n<p>//或者直接接在主目录后面</p>\r\n\r\n<p>var documentsDirectory = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>print(documentsDirectory)</p>\r\n</blockquote>\r\n\r\n<p>Library和Cache的获取方法都和上面类似，替换一些关键字就是了。</p>\r\n\r\n<p>temp目录</p>\r\n\r\n<blockquote>\r\n<p>&nbsp;// 获取tmp目录路径</p>\r\n\r\n<p>var tmpDirectory = NSTemporaryDirectory()</p>\r\n\r\n<p>print(&quot;\\(tmpDirectory)&quot;)</p>\r\n\r\n<p>//或者使用相对路径</p>\r\n\r\n<p>var tmpDirectory = NSHomeDirectory().stringByAppendingPathComponent(&quot;tmp&quot;)</p>\r\n\r\n<p>print &nbsp;(&quot;\\(tmpDirectory)&quot;);</p>\r\n</blockquote>\r\n\r\n<p>文件操作</p>\r\n\r\n<p>1.创建文件夹</p>\r\n\r\n<blockquote>\r\n<p>//在Documents目录下创建test文件夹</p>\r\n\r\n<p>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>var fileManager = NSFileManager.defaultManager()</p>\r\n\r\n<p>var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)</p>\r\n\r\n<p>var error:NSError?=nil</p>\r\n\r\n<p>var result = fileManager.createDirectoryAtPath(testDir, withIntermediateDirectories: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; attributes: nil, error: &amp;error)</p>\r\n\r\n<p>if &nbsp;result {</p>\r\n\r\n<p>&nbsp; &nbsp; print(&quot;success&quot;)</p>\r\n\r\n<p>}else {</p>\r\n\r\n<p>&nbsp; &nbsp; print(&quot;error:\\(error)&quot;)</p>\r\n\r\n<p>}&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>2.创建文件</p>\r\n\r\n<blockquote>\r\n<p>//在Documents目录下test文件夹下创建test.txt</p>\r\n\r\n<p>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>var fileManager = NSFileManager.defaultManager()</p>\r\n\r\n<p>var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)</p>\r\n\r\n<p>var fileDir = testDir.stringByAppendingPathComponent(&quot;test.txt&quot;)</p>\r\n\r\n<p>var error:NSError?=nil</p>\r\n\r\n<p>var result = fileManager.createFileAtPath(fileDir, contents: nil, attributes: nil)</p>\r\n\r\n<p>if result {</p>\r\n\r\n<p>print(&quot;success&quot;)</p>\r\n\r\n<p>}else {</p>\r\n\r\n<p>print(&quot;error:\\(error)&quot;)</p>\r\n\r\n<p>}</p>\r\n</blockquote>\r\n\r\n<p>3.写入文件</p>\r\n\r\n<blockquote>\r\n<pre>\r\n<code> var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)\r\n   var fileManager  = NSFileManager.defaultManager()\r\n   var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)\r\n\r\n   var fileDir = testDir.stringByAppendingPathComponent(&quot;test.txt&quot;)\r\n\r\n   var error:NSError?=nil\r\n   var content = &quot;this is a test&quot;\r\n\r\n   var result = content.writeToFile(fileDir, atomically: true, encoding: NSUTF8StringEncoding, error: &amp;error)\r\n\r\n    if result {\r\n        print(&quot;success&quot;)\r\n    }else {\r\n        print(&quot;error:\\(error)&quot;)\r\n    }\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>4.读取文件</p>\r\n\r\n<blockquote>\r\n<pre>\r\n<code>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)\r\n       var fileManager  = NSFileManager.defaultManager()\r\n       var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)\r\n\r\n       var fileDir = testDir.stringByAppendingPathComponent(&quot;test.txt&quot;)\r\n\r\n       var error:NSError?=nil\r\n\r\n       var content = NSString(contentsOfFile: fileDir, encoding: NSUTF8StringEncoding, error: &amp;error)\r\n\r\n        if error == nil  {\r\n            print(&quot;success content:\\(content!)&quot;)\r\n        }else {\r\n            print(&quot;error:\\(error)&quot;)\r\n        }\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>5.读取文件属性</p>\r\n\r\n<blockquote>\r\n<p>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>var fileManager = NSFileManager.defaultManager()</p>\r\n\r\n<p>var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)</p>\r\n\r\n<p>var fileDir = testDir.stringByAppendingPathComponent(&quot;test.txt&quot;)</p>\r\n\r\n<p>var error:NSError?=nil</p>\r\n\r\n<p>var attrs = fileManager.attributesOfFileSystemForPath(fileDir, error: &amp;error)</p>\r\n\r\n<p>if error == nil {</p>\r\n\r\n<p>print(&quot;success content:\\(attrs)&quot;)</p>\r\n\r\n<p>}else {</p>\r\n\r\n<p>print(&quot;error:\\(error)&quot;)</p>\r\n\r\n<p>}&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>6.删除文件</p>\r\n\r\n<blockquote>\r\n<p>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>var fileManager = NSFileManager.defaultManager()</p>\r\n\r\n<p>var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)</p>\r\n\r\n<p>var fileDir = testDir.stringByAppendingPathComponent(&quot;test.txt&quot;)</p>\r\n\r\n<p>var error:NSError?=nil</p>\r\n\r\n<p>var attrs = fileManager.removeItemAtPath(fileDir, error: &amp;error)</p>\r\n\r\n<p>if error == nil {</p>\r\n\r\n<p>println(&quot;success&quot;)</p>\r\n\r\n<p>}else {</p>\r\n\r\n<p>println(&quot;error:\\(error)&quot;)</p>\r\n\r\n<p>}</p>\r\n</blockquote>\r\n\r\n<p>7.判断是否为目录</p>\r\n\r\n<blockquote>\r\n<p>var documentDir = NSHomeDirectory().stringByAppendingPathComponent(&quot;Documents&quot;)</p>\r\n\r\n<p>var fileManager = NSFileManager.defaultManager()</p>\r\n\r\n<p>var testDir = documentDir.stringByAppendingPathComponent(&quot;test&quot;)</p>\r\n\r\n<p>var isDir = ObjCBool(false)</p>\r\n\r\n<p>var existsDir = fileManager.fileExistsAtPath(testDir, isDirectory:&amp;isDir)</p>\r\n\r\n<p>if existsDir {</p>\r\n\r\n<p>print(&quot;exists Dir&quot;)</p>\r\n\r\n<p>}else {</p>\r\n\r\n<p>print(&quot;not exists&quot;)</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n\r\n<p><a href=\"http://www.swiftmi.com/topic/331.html\">文章引用：http://www.swiftmi.com/topic/331.html&nbsp;</a></p>\r\n','2016-05-24 05:40:04','2016-05-24 05:40:04');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20150723090123'),('20160518001545');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-05-25 14:54:39
